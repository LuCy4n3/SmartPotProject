// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLserverFinale.Models;

#nullable disable

namespace SQLserverFinale.Migrations.Pot
{
    [DbContext(typeof(PotContext))]
    partial class PotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SQLserverFinale.Models.Plant", b =>
                {
                    b.Property<string>("PlantName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FlowerColor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FlowerTime")
                        .HasColumnType("int");

                    b.Property<int>("FruitingTime")
                        .HasColumnType("int");

                    b.Property<string>("LifeCycle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaxTemp")
                        .HasColumnType("int");

                    b.Property<int>("MinTemp")
                        .HasColumnType("int");

                    b.Property<int>("PhMaxVal")
                        .HasColumnType("int");

                    b.Property<int>("PhMinVal")
                        .HasColumnType("int");

                    b.Property<string>("PlantGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PlantHabit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlantHeight")
                        .HasColumnType("int");

                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<int>("PlantWidth")
                        .HasColumnType("int");

                    b.Property<int>("SunReq")
                        .HasColumnType("int");

                    b.Property<string>("WaterPref")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PlantName");

                    b.ToTable("Plant");
                });

            modelBuilder.Entity("SQLserverFinale.Models.Pot", b =>
                {
                    b.Property<int>("PotId")
                        .HasColumnType("int");

                    b.Property<double?>("GreenHouseHumidity")
                        .HasColumnType("float");

                    b.Property<double?>("GreenHousePressure")
                        .HasColumnType("float");

                    b.Property<bool?>("GreenHouseStatus")
                        .HasColumnType("bit");

                    b.Property<double?>("GreenHouseTemperature")
                        .HasColumnType("float");

                    b.Property<bool?>("HasCamera")
                        .HasColumnType("bit");

                    b.Property<bool?>("PictReq")
                        .HasColumnType("bit");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PotName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("PotNitrogen")
                        .HasColumnType("float");

                    b.Property<double?>("PotPhospor")
                        .HasColumnType("float");

                    b.Property<double?>("PotPotassium")
                        .HasColumnType("float");

                    b.Property<int>("PotType")
                        .HasColumnType("int");

                    b.Property<bool?>("PumpStatus")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PotId");

                    b.HasIndex("PlantName");

                    b.HasIndex("PotName")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Pot");
                });

            modelBuilder.Entity("SQLserverFinale.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SQLserverFinale.Models.Pot", b =>
                {
                    b.HasOne("SQLserverFinale.Models.Plant", null)
                        .WithMany()
                        .HasForeignKey("PlantName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SQLserverFinale.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
