
SmartPotFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00807000  00807000  0000091a  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000949  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003a8  00000000  00000000  00000957  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007734  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002dff  00000000  00000000  00008433  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a2f  00000000  00000000  0000b232  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000076c  00000000  00000000  0000cc64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000010c8  00000000  00000000  0000d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f5b  00000000  00000000  0000e498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000308  00000000  00000000  0000f3f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000007e2  000007e2  000008d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000f6fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.atmel_start_init 00000006  000007ca  000007ca  000008be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000058  0000037e  0000037e  00000472  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.testFunct 00000002  000007f6  000007f6  000008ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.BOD_init 00000008  000007c2  000007c2  000008b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.CLKCTRL_init 00000004  000007e6  000007e6  000008da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.CPUINT_init 00000004  000007ea  000007ea  000008de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.mcu_init 00000062  000002bc  000002bc  000003b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.USART_1_initialization 00000022  0000062a  0000062a  0000071e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.USART_2_initialization 00000022  0000064c  0000064c  00000740  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.I2C_0_initialization 0000004a  0000047a  0000047a  0000056e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.system_init 00000022  0000066e  0000066e  00000762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.I2C_0_do_I2C_RESET 00000020  000006b2  000006b2  000007a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.I2C_0_do_I2C_IDLE 00000010  00000744  00000744  00000838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.I2C_0_do_I2C_SEND_STOP 00000010  00000754  00000754  00000848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.I2C_0_do_I2C_SEND_ADR_READ 0000001c  000006d2  000006d2  000007c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.I2C_0_do_I2C_SEND_RESTART 00000006  000007d0  000007d0  000008c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.I2C_0_do_I2C_SEND_RESTART_READ 00000006  000007d6  000007d6  000008ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.I2C_0_do_I2C_SEND_ADR_WRITE 00000016  000006ee  000006ee  000007e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.I2C_0_do_I2C_SEND_RESTART_WRITE 00000006  000007dc  000007dc  000008d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.I2C_0_do_I2C_DO_ADDRESS_NACK 00000040  00000550  00000550  00000644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.I2C_0_do_I2C_RX_DO_ACK 0000000e  00000764  00000764  00000858  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.I2C_0_do_I2C_TX_DO_ACK 0000000e  00000772  00000772  00000866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.I2C_0_do_I2C_DO_NACK_STOP 00000016  00000704  00000704  000007f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.I2C_0_do_I2C_DO_NACK_RESTART 0000000e  00000780  00000780  00000874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.I2C_0_do_I2C_TX 0000006c  00000250  00000250  00000344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.I2C_0_do_I2C_RX 000000ba  0000011c  0000011c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.I2C_0_do_I2C_TX_EMPTY 0000007a  000001d6  000001d6  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.I2C_0_do_I2C_BUS_COLLISION 00000044  0000050c  0000050c  00000600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.I2C_0_do_I2C_BUS_ERROR 00000022  00000690  00000690  00000784  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.I2C_0_master_isr 00000060  0000031e  0000031e  00000412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.I2C_0_init 0000000e  0000078e  0000078e  00000882  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__vector_17 00000048  000004c4  000004c4  000005b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .data.I2C_0_fsmStateTable 00000024  00807000  000007fe  000008f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 47 .bss.I2C_0_status 00000024  00807024  00807024  0000091a  2**0
                  ALLOC
 48 .text.SLPCTRL_init 00000004  000007ee  000007ee  000008e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.USART_2_default_rx_isr_cb 0000002c  000005fe  000005fe  000006f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.USART_2_default_udre_isr_cb 0000003e  00000590  00000590  00000684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.USART_1_init 00000014  00000730  00000730  00000824  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.USART_1_enable 0000000c  000007aa  000007aa  0000089e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.USART_1_enable_tx 0000000c  000007b6  000007b6  000008aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.USART_1_write 0000000e  0000079c  0000079c  00000890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.__vector_37 00000052  000003d6  000003d6  000004ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__vector_38 00000052  00000428  00000428  0000051c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.USART_2_init 00000030  000005ce  000005ce  000006c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .data.USART_2_udre_isr_cb 00000002  00807058  00000822  00000916  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 59 .data.USART_2_rx_isr_cb 00000002  0080705a  00000824  00000918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 60 .bss.USART_2_tx_elements 00000001  0080705c  0080705c  0000091a  2**0
                  ALLOC
 61 .bss.USART_2_tx_tail 00000001  0080705d  0080705d  0000091a  2**0
                  ALLOC
 62 .bss.USART_2_tx_head 00000001  0080705e  0080705e  0000091a  2**0
                  ALLOC
 63 .bss.USART_2_txbuf 00000008  00807048  00807048  0000091a  2**0
                  ALLOC
 64 .bss.USART_2_rx_elements 00000001  0080705f  0080705f  0000091a  2**0
                  ALLOC
 65 .bss.USART_2_rx_tail 00000001  00807060  00807060  0000091a  2**0
                  ALLOC
 66 .bss.USART_2_rx_head 00000001  00807061  00807061  0000091a  2**0
                  ALLOC
 67 .bss.USART_2_rxbuf 00000008  00807050  00807050  0000091a  2**0
                  ALLOC
 68 .text.__dummy_fini 00000002  000007f8  000007f8  000008ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__dummy_funcs_on_exit 00000002  000007fa  000007fa  000008ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__dummy_simulator_exit 00000002  000007fc  000007fc  000008f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.exit    00000016  0000071a  0000071a  0000080e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text._Exit   00000004  000007f2  000007f2  000008e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
   8:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
   c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  10:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  14:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  18:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  1c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  20:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  24:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  28:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  2c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  30:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  34:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  38:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  3c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  40:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  44:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_17>
  48:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  4c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  50:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  54:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  58:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  5c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  60:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  64:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  68:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  6c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  70:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  74:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  78:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  7c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  80:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  84:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  88:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  8c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  90:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  94:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_37>
  98:	0c 94 14 02 	jmp	0x428	; 0x428 <__vector_38>
  9c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  a0:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  a4:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  a8:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>
  ac:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__bad_interrupt>

000000b0 <.dinit>:
  b0:	70 00       	.word	0x0070	; ????
  b2:	70 24       	eor	r7, r0
  b4:	00 07       	cpc	r16, r16
  b6:	fe 70       	andi	r31, 0x0E	; 14
  b8:	24 70       	andi	r18, 0x04	; 4
  ba:	58 80       	ld	r5, Y
  bc:	70 58       	subi	r23, 0x80	; 128
  be:	70 5c       	subi	r23, 0xC0	; 192
  c0:	00 08       	sbc	r0, r0
  c2:	22 70       	andi	r18, 0x02	; 2
  c4:	5c 70       	andi	r21, 0x0C	; 12
  c6:	62 80       	ldd	r6, Z+2	; 0x02

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	cd bf       	out	0x3d, r28	; 61
  d0:	df e7       	ldi	r29, 0x7F	; 127
  d2:	de bf       	out	0x3e, r29	; 62

000000d4 <__do_copy_data>:
  d4:	e0 eb       	ldi	r30, 0xB0	; 176
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	17 c0       	rjmp	.+46     	; 0x10a <__do_clear_bss+0x8>
  dc:	b5 91       	lpm	r27, Z+
  de:	a5 91       	lpm	r26, Z+
  e0:	35 91       	lpm	r19, Z+
  e2:	25 91       	lpm	r18, Z+
  e4:	05 91       	lpm	r16, Z+
  e6:	07 fd       	sbrc	r16, 7
  e8:	0c c0       	rjmp	.+24     	; 0x102 <__do_clear_bss>
  ea:	95 91       	lpm	r25, Z+
  ec:	85 91       	lpm	r24, Z+
  ee:	ef 01       	movw	r28, r30
  f0:	f9 2f       	mov	r31, r25
  f2:	e8 2f       	mov	r30, r24
  f4:	05 90       	lpm	r0, Z+
  f6:	0d 92       	st	X+, r0
  f8:	a2 17       	cp	r26, r18
  fa:	b3 07       	cpc	r27, r19
  fc:	d9 f7       	brne	.-10     	; 0xf4 <__do_copy_data+0x20>
  fe:	fe 01       	movw	r30, r28
 100:	04 c0       	rjmp	.+8      	; 0x10a <__do_clear_bss+0x8>

00000102 <__do_clear_bss>:
 102:	1d 92       	st	X+, r1
 104:	a2 17       	cp	r26, r18
 106:	b3 07       	cpc	r27, r19
 108:	e1 f7       	brne	.-8      	; 0x102 <__do_clear_bss>
 10a:	e8 3c       	cpi	r30, 0xC8	; 200
 10c:	f4 07       	cpc	r31, r20
 10e:	31 f7       	brne	.-52     	; 0xdc <__do_copy_data+0x8>
 110:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
 114:	0c 94 8d 03 	jmp	0x71a	; 0x71a <exit>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>

Disassembly of section .text:

000007e2 <__bad_interrupt>:
 7e2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.atmel_start_init:

000007ca <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 7ca:	0e 94 37 03 	call	0x66e	; 0x66e <system_init>
 7ce:	08 95       	ret

Disassembly of section .text.main:

0000037e <main>:
#include "C:\Users\simon\Documents\Atmel Studio\7.0\Automatizare\SmartPotFinal\SpecialLibraries\SHT31.h"

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 37e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <atmel_start_init>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 382:	80 b1       	in	r24, 0x00	; 0
 384:	80 61       	ori	r24, 0x10	; 16
 386:	80 b9       	out	0x00, r24	; 0
	
	PORTA_set_pin_dir(4,PORT_DIR_OUT);
	USART_1_init();
 388:	0e 94 98 03 	call	0x730	; 0x730 <USART_1_init>
	USART_1_enable();
 38c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <USART_1_enable>
	USART_1_enable_tx();
 390:	0e 94 db 03 	call	0x7b6	; 0x7b6 <USART_1_enable_tx>
	
	/* Replace with your application code */
	while (1) {
		USART_1_write('a');
 394:	81 e6       	ldi	r24, 0x61	; 97
 396:	0e 94 ce 03 	call	0x79c	; 0x79c <USART_1_write>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
 39a:	81 b1       	in	r24, 0x01	; 1
 39c:	80 61       	ori	r24, 0x10	; 16
 39e:	81 b9       	out	0x01, r24	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a0:	2f e7       	ldi	r18, 0x7F	; 127
 3a2:	8a e1       	ldi	r24, 0x1A	; 26
 3a4:	96 e0       	ldi	r25, 0x06	; 6
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	80 40       	sbci	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0x28>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x32>
 3b0:	00 00       	nop
		PORTA_set_pin_level(4,1);
		_delay_ms(500);
		USART_1_write(testFunct('b'));
 3b2:	82 e6       	ldi	r24, 0x62	; 98
 3b4:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <testFunct>
 3b8:	0e 94 ce 03 	call	0x79c	; 0x79c <USART_1_write>
	} else {
		VPORTA.OUT &= ~(1 << pin);
 3bc:	81 b1       	in	r24, 0x01	; 1
 3be:	8f 7e       	andi	r24, 0xEF	; 239
 3c0:	81 b9       	out	0x01, r24	; 1
 3c2:	2f e7       	ldi	r18, 0x7F	; 127
 3c4:	8a e1       	ldi	r24, 0x1A	; 26
 3c6:	96 e0       	ldi	r25, 0x06	; 6
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	80 40       	sbci	r24, 0x00	; 0
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <main+0x4a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <main+0x54>
 3d2:	00 00       	nop
 3d4:	df cf       	rjmp	.-66     	; 0x394 <main+0x16>

Disassembly of section .text.testFunct:

000007f6 <testFunct>:
    return crc;
}
uint8_t testFunct(uint8_t test)
{
	return test;
}
 7f6:	08 95       	ret

Disassembly of section .text.BOD_init:

000007c2 <BOD_init>:
int8_t BOD_init()
{

	// ccp_write_io((void*)&(BOD.CTRLA),BOD_SLEEP_DIS_gc /* Disabled */);

	BOD.INTCTRL = 0 << BOD_VLMIE_bp        /* voltage level monitor interrrupt enable: disabled */
 7c2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__RODATA_PM_OFFSET__+0x7f8089>
	              | BOD_VLMCFG_FALLING_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	08 95       	ret

Disassembly of section .text.CLKCTRL_init:

000007e6 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	08 95       	ret

Disassembly of section .text.CPUINT_init:

000007ea <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	08 95       	ret

Disassembly of section .text.mcu_init:

000002bc <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	08 c0       	rjmp	.+16     	; 0x2d0 <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2c0:	e8 2f       	mov	r30, r24
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	e0 5f       	subi	r30, 0xF0	; 240
 2c6:	fb 4f       	sbci	r31, 0xFB	; 251
 2c8:	90 81       	ld	r25, Z
 2ca:	98 60       	ori	r25, 0x08	; 8
 2cc:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	88 30       	cpi	r24, 0x08	; 8
 2d2:	b0 f3       	brcs	.-20     	; 0x2c0 <mcu_init+0x4>
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 c0       	rjmp	.+16     	; 0x2e8 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2d8:	e8 2f       	mov	r30, r24
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	e0 5b       	subi	r30, 0xB0	; 176
 2de:	fb 4f       	sbci	r31, 0xFB	; 251
 2e0:	90 81       	ld	r25, Z
 2e2:	98 60       	ori	r25, 0x08	; 8
 2e4:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	88 30       	cpi	r24, 0x08	; 8
 2ea:	b0 f3       	brcs	.-20     	; 0x2d8 <mcu_init+0x1c>
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 c0       	rjmp	.+16     	; 0x300 <mcu_init+0x44>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 2f0:	e8 2f       	mov	r30, r24
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	e0 59       	subi	r30, 0x90	; 144
 2f6:	fb 4f       	sbci	r31, 0xFB	; 251
 2f8:	90 81       	ld	r25, Z
 2fa:	98 60       	ori	r25, 0x08	; 8
 2fc:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	88 30       	cpi	r24, 0x08	; 8
 302:	b0 f3       	brcs	.-20     	; 0x2f0 <mcu_init+0x34>
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	08 c0       	rjmp	.+16     	; 0x318 <mcu_init+0x5c>
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 308:	e8 2f       	mov	r30, r24
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	e0 55       	subi	r30, 0x50	; 80
 30e:	fb 4f       	sbci	r31, 0xFB	; 251
 310:	90 81       	ld	r25, Z
 312:	98 60       	ori	r25, 0x08	; 8
 314:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTD + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	88 30       	cpi	r24, 0x08	; 8
 31a:	b0 f3       	brcs	.-20     	; 0x308 <mcu_init+0x4c>
		*((uint8_t *)&PORTF + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 31c:	08 95       	ret

Disassembly of section .text.USART_1_initialization:

0000062a <USART_1_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 62a:	88 b1       	in	r24, 0x08	; 8
 62c:	8d 7f       	andi	r24, 0xFD	; 253
 62e:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 630:	e1 e5       	ldi	r30, 0x51	; 81
 632:	f4 e0       	ldi	r31, 0x04	; 4
 634:	80 81       	ld	r24, Z
 636:	87 7f       	andi	r24, 0xF7	; 247
 638:	80 83       	st	Z, r24
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 63a:	89 b1       	in	r24, 0x09	; 9
 63c:	8e 7f       	andi	r24, 0xFE	; 254
 63e:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 640:	88 b1       	in	r24, 0x08	; 8
 642:	81 60       	ori	r24, 0x01	; 1
 644:	88 b9       	out	0x08, r24	; 8
	    // <true"> High
	    false);

	PC0_set_dir(PORT_DIR_OUT);

	USART_1_init();
 646:	0e 94 98 03 	call	0x730	; 0x730 <USART_1_init>
 64a:	08 95       	ret

Disassembly of section .text.USART_2_initialization:

0000064c <USART_2_initialization>:
 */
static inline void PORTF_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
 64c:	84 b3       	in	r24, 0x14	; 20
 64e:	8d 7f       	andi	r24, 0xFD	; 253
 650:	84 bb       	out	0x14, r24	; 20
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTF + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 652:	e1 eb       	ldi	r30, 0xB1	; 177
 654:	f4 e0       	ldi	r31, 0x04	; 4
 656:	80 81       	ld	r24, Z
 658:	87 7f       	andi	r24, 0xF7	; 247
 65a:	80 83       	st	Z, r24
static inline void PORTF_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTF.OUT |= (1 << pin);
	} else {
		VPORTF.OUT &= ~(1 << pin);
 65c:	85 b3       	in	r24, 0x15	; 21
 65e:	8e 7f       	andi	r24, 0xFE	; 254
 660:	85 bb       	out	0x15, r24	; 21
	switch (dir) {
	case PORT_DIR_IN:
		VPORTF.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTF.DIR |= (1 << pin);
 662:	84 b3       	in	r24, 0x14	; 20
 664:	81 60       	ori	r24, 0x01	; 1
 666:	84 bb       	out	0x14, r24	; 20
	    // <true"> High
	    false);

	PF0_set_dir(PORT_DIR_OUT);

	USART_2_init();
 668:	0e 94 e7 02 	call	0x5ce	; 0x5ce <USART_2_init>
 66c:	08 95       	ret

Disassembly of section .text.I2C_0_initialization:

0000047a <I2C_0_initialization>:
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 47a:	81 b1       	in	r24, 0x01	; 1
 47c:	87 7f       	andi	r24, 0xF7	; 247
 47e:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 480:	80 b1       	in	r24, 0x00	; 0
 482:	88 60       	ori	r24, 0x08	; 8
 484:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 486:	e3 e1       	ldi	r30, 0x13	; 19
 488:	f4 e0       	ldi	r31, 0x04	; 4
 48a:	80 81       	ld	r24, Z
 48c:	87 7f       	andi	r24, 0xF7	; 247
 48e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
 490:	80 81       	ld	r24, Z
 492:	8f 77       	andi	r24, 0x7F	; 127
 494:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 496:	80 81       	ld	r24, Z
 498:	88 7f       	andi	r24, 0xF8	; 248
 49a:	80 83       	st	Z, r24
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
 49c:	81 b1       	in	r24, 0x01	; 1
 49e:	8b 7f       	andi	r24, 0xFB	; 251
 4a0:	81 b9       	out	0x01, r24	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 4a2:	80 b1       	in	r24, 0x00	; 0
 4a4:	84 60       	ori	r24, 0x04	; 4
 4a6:	80 b9       	out	0x00, r24	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 4a8:	e2 e1       	ldi	r30, 0x12	; 18
 4aa:	f4 e0       	ldi	r31, 0x04	; 4
 4ac:	80 81       	ld	r24, Z
 4ae:	87 7f       	andi	r24, 0xF7	; 247
 4b0:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
 4b2:	80 81       	ld	r24, Z
 4b4:	8f 77       	andi	r24, 0x7F	; 127
 4b6:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 4b8:	80 81       	ld	r24, Z
 4ba:	88 7f       	andi	r24, 0xF8	; 248
 4bc:	80 83       	st	Z, r24
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	/* set the alternate pin mux */

	I2C_0_init();
 4be:	0e 94 c7 03 	call	0x78e	; 0x78e <I2C_0_init>
 4c2:	08 95       	ret

Disassembly of section .text.system_init:

0000066e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 66e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <mcu_init>

	CLKCTRL_init();
 672:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <CLKCTRL_init>

	USART_1_initialization();
 676:	0e 94 15 03 	call	0x62a	; 0x62a <USART_1_initialization>

	USART_2_initialization();
 67a:	0e 94 26 03 	call	0x64c	; 0x64c <USART_2_initialization>

	SLPCTRL_init();
 67e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <SLPCTRL_init>

	CPUINT_init();
 682:	0e 94 f5 03 	call	0x7ea	; 0x7ea <CPUINT_init>

	I2C_0_initialization();
 686:	0e 94 3d 02 	call	0x47a	; 0x47a <I2C_0_initialization>

	BOD_init();
 68a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <BOD_init>
 68e:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_RESET:

000006b2 <I2C_0_do_I2C_RESET>:
}

const uint8_t * getBuffer(void)
{
	return I2C_0_status.data_ptr;
}
 6b2:	e0 e0       	ldi	r30, 0x00	; 0
 6b4:	f9 e0       	ldi	r31, 0x09	; 9
 6b6:	84 81       	ldd	r24, Z+4	; 0x04
 6b8:	88 60       	ori	r24, 0x08	; 8
 6ba:	84 83       	std	Z+4, r24	; 0x04
 6bc:	85 81       	ldd	r24, Z+5	; 0x05
 6be:	81 60       	ori	r24, 0x01	; 1
 6c0:	85 83       	std	Z+5, r24	; 0x05
 6c2:	e4 e2       	ldi	r30, 0x24	; 36
 6c4:	f0 e7       	ldi	r31, 0x70	; 112
 6c6:	80 81       	ld	r24, Z
 6c8:	8e 7f       	andi	r24, 0xFE	; 254
 6ca:	80 83       	st	Z, r24
 6cc:	13 86       	std	Z+11, r1	; 0x0b
 6ce:	8e e0       	ldi	r24, 0x0E	; 14
 6d0:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_IDLE:

00000744 <I2C_0_do_I2C_IDLE>:
 744:	e4 e2       	ldi	r30, 0x24	; 36
 746:	f0 e7       	ldi	r31, 0x70	; 112
 748:	80 81       	ld	r24, Z
 74a:	8e 7f       	andi	r24, 0xFE	; 254
 74c:	80 83       	st	Z, r24
 74e:	13 86       	std	Z+11, r1	; 0x0b
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_SEND_STOP:

00000754 <I2C_0_do_I2C_SEND_STOP>:
 754:	e0 e0       	ldi	r30, 0x00	; 0
 756:	f9 e0       	ldi	r31, 0x09	; 9
 758:	84 81       	ldd	r24, Z+4	; 0x04
 75a:	83 60       	ori	r24, 0x03	; 3
 75c:	84 83       	std	Z+4, r24	; 0x04
 75e:	0e 94 a2 03 	call	0x744	; 0x744 <I2C_0_do_I2C_IDLE>
 762:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_SEND_ADR_READ:

000006d2 <I2C_0_do_I2C_SEND_ADR_READ>:
 6d2:	e4 e2       	ldi	r30, 0x24	; 36
 6d4:	f0 e7       	ldi	r31, 0x70	; 112
 6d6:	80 81       	ld	r24, Z
 6d8:	88 60       	ori	r24, 0x08	; 8
 6da:	80 83       	st	Z, r24
 6dc:	81 81       	ldd	r24, Z+1	; 0x01
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	81 60       	ori	r24, 0x01	; 1
 6e6:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__RODATA_PM_OFFSET__+0x7f8907>
 6ea:	84 e0       	ldi	r24, 0x04	; 4
 6ec:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_SEND_RESTART:

000007d0 <I2C_0_do_I2C_SEND_RESTART>:
	return I2C_0_do_I2C_SEND_ADR_WRITE();
}

static i2c_fsm_states_t I2C_0_do_I2C_SEND_RESTART(void)
{
	return I2C_0_do_I2C_SEND_ADR_READ();
 7d0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <I2C_0_do_I2C_SEND_ADR_READ>
}
 7d4:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_SEND_RESTART_READ:

000007d6 <I2C_0_do_I2C_SEND_RESTART_READ>:
	return I2C_IDLE; // park the FSM on IDLE
}

static i2c_fsm_states_t I2C_0_do_I2C_SEND_RESTART_READ(void)
{
	return I2C_0_do_I2C_SEND_ADR_READ();
 7d6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <I2C_0_do_I2C_SEND_ADR_READ>
}
 7da:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_SEND_ADR_WRITE:

000006ee <I2C_0_do_I2C_SEND_ADR_WRITE>:
}

const uint8_t * getBuffer(void)
{
	return I2C_0_status.data_ptr;
}
 6ee:	e4 e2       	ldi	r30, 0x24	; 36
 6f0:	f0 e7       	ldi	r31, 0x70	; 112
 6f2:	80 81       	ld	r24, Z
 6f4:	88 60       	ori	r24, 0x08	; 8
 6f6:	80 83       	st	Z, r24
 6f8:	81 81       	ldd	r24, Z+1	; 0x01
 6fa:	88 0f       	add	r24, r24
 6fc:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__RODATA_PM_OFFSET__+0x7f8907>
 700:	83 e0       	ldi	r24, 0x03	; 3
 702:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_SEND_RESTART_WRITE:

000007dc <I2C_0_do_I2C_SEND_RESTART_WRITE>:
	return I2C_0_do_I2C_SEND_ADR_READ();
}

static i2c_fsm_states_t I2C_0_do_I2C_SEND_RESTART_WRITE(void)
{
	return I2C_0_do_I2C_SEND_ADR_WRITE();
 7dc:	0e 94 77 03 	call	0x6ee	; 0x6ee <I2C_0_do_I2C_SEND_ADR_WRITE>
}
 7e0:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_DO_ADDRESS_NACK:

00000550 <I2C_0_do_I2C_DO_ADDRESS_NACK>:
}

const uint8_t * getBuffer(void)
{
	return I2C_0_status.data_ptr;
}
 550:	a4 e2       	ldi	r26, 0x24	; 36
 552:	b0 e7       	ldi	r27, 0x70	; 112
 554:	8c 91       	ld	r24, X
 556:	87 7f       	andi	r24, 0xF7	; 247
 558:	8c 93       	st	X, r24
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	1b 96       	adiw	r26, 0x0b	; 11
 55e:	8c 93       	st	X, r24
 560:	1b 97       	sbiw	r26, 0x0b	; 11
 562:	50 96       	adiw	r26, 0x10	; 16
 564:	ed 91       	ld	r30, X+
 566:	fc 91       	ld	r31, X
 568:	51 97       	sbiw	r26, 0x11	; 17
 56a:	5c 96       	adiw	r26, 0x1c	; 28
 56c:	8d 91       	ld	r24, X+
 56e:	9c 91       	ld	r25, X
 570:	5d 97       	sbiw	r26, 0x1d	; 29
 572:	09 95       	icall
 574:	82 30       	cpi	r24, 0x02	; 2
 576:	19 f0       	breq	.+6      	; 0x57e <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	21 f0       	breq	.+8      	; 0x584 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x34>
 57c:	06 c0       	rjmp	.+12     	; 0x58a <I2C_0_do_I2C_DO_ADDRESS_NACK+0x3a>
 57e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <I2C_0_do_I2C_SEND_RESTART_READ>
 582:	08 95       	ret
 584:	0e 94 ee 03 	call	0x7dc	; 0x7dc <I2C_0_do_I2C_SEND_RESTART_WRITE>
 588:	08 95       	ret
 58a:	0e 94 aa 03 	call	0x754	; 0x754 <I2C_0_do_I2C_SEND_STOP>
 58e:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_RX_DO_ACK:

00000764 <I2C_0_do_I2C_RX_DO_ACK>:
 764:	e0 e0       	ldi	r30, 0x00	; 0
 766:	f9 e0       	ldi	r31, 0x09	; 9
 768:	84 81       	ldd	r24, Z+4	; 0x04
 76a:	8b 7f       	andi	r24, 0xFB	; 251
 76c:	84 83       	std	Z+4, r24	; 0x04
 76e:	84 e0       	ldi	r24, 0x04	; 4
 770:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_TX_DO_ACK:

00000772 <I2C_0_do_I2C_TX_DO_ACK>:
 772:	e0 e0       	ldi	r30, 0x00	; 0
 774:	f9 e0       	ldi	r31, 0x09	; 9
 776:	84 81       	ldd	r24, Z+4	; 0x04
 778:	8b 7f       	andi	r24, 0xFB	; 251
 77a:	84 83       	std	Z+4, r24	; 0x04
 77c:	83 e0       	ldi	r24, 0x03	; 3
 77e:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_DO_NACK_STOP:

00000704 <I2C_0_do_I2C_DO_NACK_STOP>:
 704:	e0 e0       	ldi	r30, 0x00	; 0
 706:	f9 e0       	ldi	r31, 0x09	; 9
 708:	84 81       	ldd	r24, Z+4	; 0x04
 70a:	84 60       	ori	r24, 0x04	; 4
 70c:	84 83       	std	Z+4, r24	; 0x04
 70e:	84 81       	ldd	r24, Z+4	; 0x04
 710:	83 60       	ori	r24, 0x03	; 3
 712:	84 83       	std	Z+4, r24	; 0x04
 714:	0e 94 a2 03 	call	0x744	; 0x744 <I2C_0_do_I2C_IDLE>
 718:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_DO_NACK_RESTART:

00000780 <I2C_0_do_I2C_DO_NACK_RESTART>:
 780:	e0 e0       	ldi	r30, 0x00	; 0
 782:	f9 e0       	ldi	r31, 0x09	; 9
 784:	84 81       	ldd	r24, Z+4	; 0x04
 786:	84 60       	ori	r24, 0x04	; 4
 788:	84 83       	std	Z+4, r24	; 0x04
 78a:	88 e0       	ldi	r24, 0x08	; 8
 78c:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_TX:

00000250 <I2C_0_do_I2C_TX>:
 250:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__RODATA_PM_OFFSET__+0x7f8905>
 254:	84 ff       	sbrs	r24, 4
 256:	19 c0       	rjmp	.+50     	; 0x28a <I2C_0_do_I2C_TX+0x3a>
 258:	a4 e2       	ldi	r26, 0x24	; 36
 25a:	b0 e7       	ldi	r27, 0x70	; 112
 25c:	52 96       	adiw	r26, 0x12	; 18
 25e:	ed 91       	ld	r30, X+
 260:	fc 91       	ld	r31, X
 262:	53 97       	sbiw	r26, 0x13	; 19
 264:	5e 96       	adiw	r26, 0x1e	; 30
 266:	8d 91       	ld	r24, X+
 268:	9c 91       	ld	r25, X
 26a:	5f 97       	sbiw	r26, 0x1f	; 31
 26c:	09 95       	icall
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	19 f0       	breq	.+6      	; 0x278 <I2C_0_do_I2C_TX+0x28>
 272:	83 30       	cpi	r24, 0x03	; 3
 274:	21 f0       	breq	.+8      	; 0x27e <I2C_0_do_I2C_TX+0x2e>
 276:	06 c0       	rjmp	.+12     	; 0x284 <I2C_0_do_I2C_TX+0x34>
 278:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <I2C_0_do_I2C_SEND_RESTART_READ>
 27c:	08 95       	ret
 27e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <I2C_0_do_I2C_SEND_RESTART_WRITE>
 282:	08 95       	ret
 284:	0e 94 aa 03 	call	0x754	; 0x754 <I2C_0_do_I2C_SEND_STOP>
 288:	08 95       	ret
 28a:	e4 e2       	ldi	r30, 0x24	; 36
 28c:	f0 e7       	ldi	r31, 0x70	; 112
 28e:	80 81       	ld	r24, Z
 290:	87 7f       	andi	r24, 0xF7	; 247
 292:	80 83       	st	Z, r24
 294:	a2 81       	ldd	r26, Z+2	; 0x02
 296:	b3 81       	ldd	r27, Z+3	; 0x03
 298:	cd 01       	movw	r24, r26
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	82 83       	std	Z+2, r24	; 0x02
 29e:	93 83       	std	Z+3, r25	; 0x03
 2a0:	8c 91       	ld	r24, X
 2a2:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__RODATA_PM_OFFSET__+0x7f8908>
 2a6:	84 81       	ldd	r24, Z+4	; 0x04
 2a8:	95 81       	ldd	r25, Z+5	; 0x05
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	84 83       	std	Z+4, r24	; 0x04
 2ae:	95 83       	std	Z+5, r25	; 0x05
 2b0:	89 2b       	or	r24, r25
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <I2C_0_do_I2C_TX+0x68>
 2b4:	83 e0       	ldi	r24, 0x03	; 3
 2b6:	08 95       	ret
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_RX:

0000011c <I2C_0_do_I2C_RX>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	e4 e2       	ldi	r30, 0x24	; 36
 122:	f0 e7       	ldi	r31, 0x70	; 112
 124:	80 81       	ld	r24, Z
 126:	87 7f       	andi	r24, 0xF7	; 247
 128:	80 83       	st	Z, r24
 12a:	84 81       	ldd	r24, Z+4	; 0x04
 12c:	95 81       	ldd	r25, Z+5	; 0x05
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	31 f4       	brne	.+12     	; 0x13e <I2C_0_do_I2C_RX+0x22>
 132:	e0 e0       	ldi	r30, 0x00	; 0
 134:	f9 e0       	ldi	r31, 0x09	; 9
 136:	84 81       	ldd	r24, Z+4	; 0x04
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	84 83       	std	Z+4, r24	; 0x04
 13c:	05 c0       	rjmp	.+10     	; 0x148 <I2C_0_do_I2C_RX+0x2c>
 13e:	e0 e0       	ldi	r30, 0x00	; 0
 140:	f9 e0       	ldi	r31, 0x09	; 9
 142:	84 81       	ldd	r24, Z+4	; 0x04
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	84 83       	std	Z+4, r24	; 0x04
 148:	e4 e2       	ldi	r30, 0x24	; 36
 14a:	f0 e7       	ldi	r31, 0x70	; 112
 14c:	84 81       	ldd	r24, Z+4	; 0x04
 14e:	95 81       	ldd	r25, Z+5	; 0x05
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	84 83       	std	Z+4, r24	; 0x04
 154:	95 83       	std	Z+5, r25	; 0x05
 156:	89 2b       	or	r24, r25
 158:	a9 f0       	breq	.+42     	; 0x184 <I2C_0_do_I2C_RX+0x68>
 15a:	df 01       	movw	r26, r30
 15c:	c2 81       	ldd	r28, Z+2	; 0x02
 15e:	d3 81       	ldd	r29, Z+3	; 0x03
 160:	e0 e0       	ldi	r30, 0x00	; 0
 162:	f9 e0       	ldi	r31, 0x09	; 9
 164:	80 85       	ldd	r24, Z+8	; 0x08
 166:	88 83       	st	Y, r24
 168:	12 96       	adiw	r26, 0x02	; 2
 16a:	8d 91       	ld	r24, X+
 16c:	9c 91       	ld	r25, X
 16e:	13 97       	sbiw	r26, 0x03	; 3
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	12 96       	adiw	r26, 0x02	; 2
 174:	8d 93       	st	X+, r24
 176:	9c 93       	st	X, r25
 178:	13 97       	sbiw	r26, 0x03	; 3
 17a:	84 81       	ldd	r24, Z+4	; 0x04
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	84 83       	std	Z+4, r24	; 0x04
 180:	84 e0       	ldi	r24, 0x04	; 4
 182:	26 c0       	rjmp	.+76     	; 0x1d0 <I2C_0_do_I2C_RX+0xb4>
 184:	a4 e2       	ldi	r26, 0x24	; 36
 186:	b0 e7       	ldi	r27, 0x70	; 112
 188:	12 96       	adiw	r26, 0x02	; 2
 18a:	ed 91       	ld	r30, X+
 18c:	fc 91       	ld	r31, X
 18e:	13 97       	sbiw	r26, 0x03	; 3
 190:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__RODATA_PM_OFFSET__+0x7f8908>
 194:	80 83       	st	Z, r24
 196:	12 96       	adiw	r26, 0x02	; 2
 198:	8d 91       	ld	r24, X+
 19a:	9c 91       	ld	r25, X
 19c:	13 97       	sbiw	r26, 0x03	; 3
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	12 96       	adiw	r26, 0x02	; 2
 1a2:	8d 93       	st	X+, r24
 1a4:	9c 93       	st	X, r25
 1a6:	13 97       	sbiw	r26, 0x03	; 3
 1a8:	8c 91       	ld	r24, X
 1aa:	84 60       	ori	r24, 0x04	; 4
 1ac:	8c 93       	st	X, r24
 1ae:	1c 96       	adiw	r26, 0x0c	; 12
 1b0:	ed 91       	ld	r30, X+
 1b2:	fc 91       	ld	r31, X
 1b4:	1d 97       	sbiw	r26, 0x0d	; 13
 1b6:	58 96       	adiw	r26, 0x18	; 24
 1b8:	8d 91       	ld	r24, X+
 1ba:	9c 91       	ld	r25, X
 1bc:	59 97       	sbiw	r26, 0x19	; 25
 1be:	09 95       	icall
 1c0:	82 50       	subi	r24, 0x02	; 2
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	18 f4       	brcc	.+6      	; 0x1cc <I2C_0_do_I2C_RX+0xb0>
 1c6:	0e 94 c0 03 	call	0x780	; 0x780 <I2C_0_do_I2C_DO_NACK_RESTART>
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <I2C_0_do_I2C_RX+0xb4>
 1cc:	0e 94 82 03 	call	0x704	; 0x704 <I2C_0_do_I2C_DO_NACK_STOP>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_TX_EMPTY:

000001d6 <I2C_0_do_I2C_TX_EMPTY>:
 1d6:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__RODATA_PM_OFFSET__+0x7f8905>
 1da:	84 ff       	sbrs	r24, 4
 1dc:	19 c0       	rjmp	.+50     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 1de:	a4 e2       	ldi	r26, 0x24	; 36
 1e0:	b0 e7       	ldi	r27, 0x70	; 112
 1e2:	52 96       	adiw	r26, 0x12	; 18
 1e4:	ed 91       	ld	r30, X+
 1e6:	fc 91       	ld	r31, X
 1e8:	53 97       	sbiw	r26, 0x13	; 19
 1ea:	5e 96       	adiw	r26, 0x1e	; 30
 1ec:	8d 91       	ld	r24, X+
 1ee:	9c 91       	ld	r25, X
 1f0:	5f 97       	sbiw	r26, 0x1f	; 31
 1f2:	09 95       	icall
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	19 f0       	breq	.+6      	; 0x1fe <I2C_0_do_I2C_TX_EMPTY+0x28>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	21 f0       	breq	.+8      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 1fe:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <I2C_0_do_I2C_SEND_RESTART_READ>
 202:	08 95       	ret
 204:	0e 94 ee 03 	call	0x7dc	; 0x7dc <I2C_0_do_I2C_SEND_RESTART_WRITE>
 208:	08 95       	ret
 20a:	0e 94 aa 03 	call	0x754	; 0x754 <I2C_0_do_I2C_SEND_STOP>
 20e:	08 95       	ret
 210:	a4 e2       	ldi	r26, 0x24	; 36
 212:	b0 e7       	ldi	r27, 0x70	; 112
 214:	8c 91       	ld	r24, X
 216:	84 60       	ori	r24, 0x04	; 4
 218:	8c 93       	st	X, r24
 21a:	1c 96       	adiw	r26, 0x0c	; 12
 21c:	ed 91       	ld	r30, X+
 21e:	fc 91       	ld	r31, X
 220:	1d 97       	sbiw	r26, 0x0d	; 13
 222:	58 96       	adiw	r26, 0x18	; 24
 224:	8d 91       	ld	r24, X+
 226:	9c 91       	ld	r25, X
 228:	59 97       	sbiw	r26, 0x19	; 25
 22a:	09 95       	icall
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	39 f0       	breq	.+14     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 230:	84 30       	cpi	r24, 0x04	; 4
 232:	41 f0       	breq	.+16     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	49 f4       	brne	.+18     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 238:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <I2C_0_do_I2C_SEND_RESTART_READ>
 23c:	08 95       	ret
 23e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <I2C_0_do_I2C_SEND_RESTART_WRITE>
 242:	08 95       	ret
 244:	0e 94 28 01 	call	0x250	; 0x250 <I2C_0_do_I2C_TX>
 248:	08 95       	ret
 24a:	0e 94 aa 03 	call	0x754	; 0x754 <I2C_0_do_I2C_SEND_STOP>
 24e:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_BUS_COLLISION:

0000050c <I2C_0_do_I2C_BUS_COLLISION>:
 50c:	e0 e0       	ldi	r30, 0x00	; 0
 50e:	f9 e0       	ldi	r31, 0x09	; 9
 510:	85 81       	ldd	r24, Z+5	; 0x05
 512:	88 60       	ori	r24, 0x08	; 8
 514:	85 83       	std	Z+5, r24	; 0x05
 516:	a4 e2       	ldi	r26, 0x24	; 36
 518:	b0 e7       	ldi	r27, 0x70	; 112
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	1b 96       	adiw	r26, 0x0b	; 11
 51e:	8c 93       	st	X, r24
 520:	1b 97       	sbiw	r26, 0x0b	; 11
 522:	1e 96       	adiw	r26, 0x0e	; 14
 524:	ed 91       	ld	r30, X+
 526:	fc 91       	ld	r31, X
 528:	1f 97       	sbiw	r26, 0x0f	; 15
 52a:	5a 96       	adiw	r26, 0x1a	; 26
 52c:	8d 91       	ld	r24, X+
 52e:	9c 91       	ld	r25, X
 530:	5b 97       	sbiw	r26, 0x1b	; 27
 532:	09 95       	icall
 534:	82 30       	cpi	r24, 0x02	; 2
 536:	19 f0       	breq	.+6      	; 0x53e <I2C_0_do_I2C_BUS_COLLISION+0x32>
 538:	83 30       	cpi	r24, 0x03	; 3
 53a:	21 f0       	breq	.+8      	; 0x544 <I2C_0_do_I2C_BUS_COLLISION+0x38>
 53c:	06 c0       	rjmp	.+12     	; 0x54a <I2C_0_do_I2C_BUS_COLLISION+0x3e>
 53e:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <I2C_0_do_I2C_SEND_RESTART_READ>
 542:	08 95       	ret
 544:	0e 94 ee 03 	call	0x7dc	; 0x7dc <I2C_0_do_I2C_SEND_RESTART_WRITE>
 548:	08 95       	ret
 54a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <I2C_0_do_I2C_RESET>
 54e:	08 95       	ret

Disassembly of section .text.I2C_0_do_I2C_BUS_ERROR:

00000690 <I2C_0_do_I2C_BUS_ERROR>:
 690:	e0 e0       	ldi	r30, 0x00	; 0
 692:	f9 e0       	ldi	r31, 0x09	; 9
 694:	84 81       	ldd	r24, Z+4	; 0x04
 696:	88 60       	ori	r24, 0x08	; 8
 698:	84 83       	std	Z+4, r24	; 0x04
 69a:	85 81       	ldd	r24, Z+5	; 0x05
 69c:	81 60       	ori	r24, 0x01	; 1
 69e:	85 83       	std	Z+5, r24	; 0x05
 6a0:	e4 e2       	ldi	r30, 0x24	; 36
 6a2:	f0 e7       	ldi	r31, 0x70	; 112
 6a4:	80 81       	ld	r24, Z
 6a6:	8e 7f       	andi	r24, 0xFE	; 254
 6a8:	80 83       	st	Z, r24
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	83 87       	std	Z+11, r24	; 0x0b
 6ae:	8e e0       	ldi	r24, 0x0E	; 14
 6b0:	08 95       	ret

Disassembly of section .text.I2C_0_master_isr:

0000031e <I2C_0_master_isr>:
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	e0 e0       	ldi	r30, 0x00	; 0
 324:	f9 e0       	ldi	r31, 0x09	; 9
 326:	85 81       	ldd	r24, Z+5	; 0x05
 328:	80 6c       	ori	r24, 0xC0	; 192
 32a:	85 83       	std	Z+5, r24	; 0x05
 32c:	80 91 24 70 	lds	r24, 0x7024	; 0x807024 <I2C_0_status>
 330:	83 ff       	sbrs	r24, 3
 332:	07 c0       	rjmp	.+14     	; 0x342 <I2C_0_master_isr+0x24>
 334:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__RODATA_PM_OFFSET__+0x7f8905>
 338:	84 ff       	sbrs	r24, 4
 33a:	03 c0       	rjmp	.+6      	; 0x342 <I2C_0_master_isr+0x24>
 33c:	8f e0       	ldi	r24, 0x0F	; 15
 33e:	80 93 2e 70 	sts	0x702E, r24	; 0x80702e <I2C_0_status+0xa>
 342:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__RODATA_PM_OFFSET__+0x7f8905>
 346:	83 ff       	sbrs	r24, 3
 348:	03 c0       	rjmp	.+6      	; 0x350 <I2C_0_master_isr+0x32>
 34a:	80 e1       	ldi	r24, 0x10	; 16
 34c:	80 93 2e 70 	sts	0x702E, r24	; 0x80702e <I2C_0_status+0xa>
 350:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__RODATA_PM_OFFSET__+0x7f8905>
 354:	82 ff       	sbrs	r24, 2
 356:	03 c0       	rjmp	.+6      	; 0x35e <I2C_0_master_isr+0x40>
 358:	81 e1       	ldi	r24, 0x11	; 17
 35a:	80 93 2e 70 	sts	0x702E, r24	; 0x80702e <I2C_0_status+0xa>
 35e:	c4 e2       	ldi	r28, 0x24	; 36
 360:	d0 e7       	ldi	r29, 0x70	; 112
 362:	ea 85       	ldd	r30, Y+10	; 0x0a
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	e0 50       	subi	r30, 0x00	; 0
 36c:	f0 49       	sbci	r31, 0x90	; 144
 36e:	01 90       	ld	r0, Z+
 370:	f0 81       	ld	r31, Z
 372:	e0 2d       	mov	r30, r0
 374:	09 95       	icall
 376:	8a 87       	std	Y+10, r24	; 0x0a
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

Disassembly of section .text.I2C_0_init:

0000078e <I2C_0_init>:
	//		 | TWI_SDAHOLD_OFF_gc /* SDA hold time off */
	//		 | TWI_SDASETUP_4CYC_gc; /* SDA setup time is 4 clock cycles */

	// TWI0.DBGCTRL = 0 << TWI_DBGRUN_bp; /* Debug Run: disabled */

	TWI0.MBAUD = (uint8_t)TWI0_BAUD(100000, 0); /* set MBAUD register */
 78e:	e0 e0       	ldi	r30, 0x00	; 0
 790:	f9 e0       	ldi	r31, 0x09	; 9
 792:	8f e0       	ldi	r24, 0x0F	; 15
 794:	86 83       	std	Z+6, r24	; 0x06

	TWI0.MCTRLA = 1 << TWI_ENABLE_bp        /* Enable TWI Master: enabled */
 796:	81 ec       	ldi	r24, 0xC1	; 193
 798:	83 83       	std	Z+3, r24	; 0x03
 79a:	08 95       	ret

Disassembly of section .text.__vector_17:

000004c4 <__vector_17>:
}

const uint8_t * getBuffer(void)
{
	return I2C_0_status.data_ptr;
}
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	2f 93       	push	r18
 4d0:	3f 93       	push	r19
 4d2:	4f 93       	push	r20
 4d4:	5f 93       	push	r21
 4d6:	6f 93       	push	r22
 4d8:	7f 93       	push	r23
 4da:	8f 93       	push	r24
 4dc:	9f 93       	push	r25
 4de:	af 93       	push	r26
 4e0:	bf 93       	push	r27
 4e2:	ef 93       	push	r30
 4e4:	ff 93       	push	r31
 4e6:	0e 94 8f 01 	call	0x31e	; 0x31e <I2C_0_master_isr>
 4ea:	ff 91       	pop	r31
 4ec:	ef 91       	pop	r30
 4ee:	bf 91       	pop	r27
 4f0:	af 91       	pop	r26
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	7f 91       	pop	r23
 4f8:	6f 91       	pop	r22
 4fa:	5f 91       	pop	r21
 4fc:	4f 91       	pop	r20
 4fe:	3f 91       	pop	r19
 500:	2f 91       	pop	r18
 502:	0f 90       	pop	r0
 504:	0f be       	out	0x3f, r0	; 63
 506:	0f 90       	pop	r0
 508:	1f 90       	pop	r1
 50a:	18 95       	reti

Disassembly of section .text.SLPCTRL_init:

000007ee <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	08 95       	ret

Disassembly of section .text.USART_2_default_rx_isr_cb:

000005fe <USART_2_default_rx_isr_cb>:
 *
 * \return Nothing
 */
void USART_1_enable_rx()
{
	USART1.CTRLB |= USART_RXEN_bm;
 5fe:	90 91 40 08 	lds	r25, 0x0840	; 0x800840 <__RODATA_PM_OFFSET__+0x7f8840>
 602:	e0 91 61 70 	lds	r30, 0x7061	; 0x807061 <USART_2_rx_head>
 606:	ef 5f       	subi	r30, 0xFF	; 255
 608:	e7 70       	andi	r30, 0x07	; 7
 60a:	80 91 60 70 	lds	r24, 0x7060	; 0x807060 <USART_2_rx_tail>
 60e:	e8 17       	cp	r30, r24
 610:	59 f0       	breq	.+22     	; 0x628 <USART_2_default_rx_isr_cb+0x2a>
 612:	e0 93 61 70 	sts	0x7061, r30	; 0x807061 <USART_2_rx_head>
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	e0 5b       	subi	r30, 0xB0	; 176
 61a:	ff 48       	sbci	r31, 0x8F	; 143
 61c:	90 83       	st	Z, r25
 61e:	80 91 5f 70 	lds	r24, 0x705F	; 0x80705f <USART_2_rx_elements>
 622:	8f 5f       	subi	r24, 0xFF	; 255
 624:	80 93 5f 70 	sts	0x705F, r24	; 0x80705f <USART_2_rx_elements>
 628:	08 95       	ret

Disassembly of section .text.USART_2_default_udre_isr_cb:

00000590 <USART_2_default_udre_isr_cb>:
 590:	80 91 5c 70 	lds	r24, 0x705C	; 0x80705c <USART_2_tx_elements>
 594:	88 23       	and	r24, r24
 596:	89 f0       	breq	.+34     	; 0x5ba <USART_2_default_udre_isr_cb+0x2a>
 598:	e0 91 5d 70 	lds	r30, 0x705D	; 0x80705d <USART_2_tx_tail>
 59c:	ef 5f       	subi	r30, 0xFF	; 255
 59e:	e7 70       	andi	r30, 0x07	; 7
 5a0:	e0 93 5d 70 	sts	0x705D, r30	; 0x80705d <USART_2_tx_tail>
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
 5a6:	e8 5b       	subi	r30, 0xB8	; 184
 5a8:	ff 48       	sbci	r31, 0x8F	; 143
 5aa:	80 81       	ld	r24, Z
 5ac:	80 93 42 08 	sts	0x0842, r24	; 0x800842 <__RODATA_PM_OFFSET__+0x7f8842>
 5b0:	80 91 5c 70 	lds	r24, 0x705C	; 0x80705c <USART_2_tx_elements>
 5b4:	81 50       	subi	r24, 0x01	; 1
 5b6:	80 93 5c 70 	sts	0x705C, r24	; 0x80705c <USART_2_tx_elements>
 5ba:	80 91 5c 70 	lds	r24, 0x705C	; 0x80705c <USART_2_tx_elements>
 5be:	81 11       	cpse	r24, r1
 5c0:	05 c0       	rjmp	.+10     	; 0x5cc <USART_2_default_udre_isr_cb+0x3c>
 5c2:	e0 e4       	ldi	r30, 0x40	; 64
 5c4:	f8 e0       	ldi	r31, 0x08	; 8
 5c6:	85 81       	ldd	r24, Z+5	; 0x05
 5c8:	8f 7d       	andi	r24, 0xDF	; 223
 5ca:	85 83       	std	Z+5, r24	; 0x05
 5cc:	08 95       	ret

Disassembly of section .text.USART_1_init:

00000730 <USART_1_init>:
 730:	e0 e2       	ldi	r30, 0x20	; 32
 732:	f8 e0       	ldi	r31, 0x08	; 8
 734:	8b e0       	ldi	r24, 0x0B	; 11
 736:	9a e1       	ldi	r25, 0x1A	; 26
 738:	80 87       	std	Z+8, r24	; 0x08
 73a:	91 87       	std	Z+9, r25	; 0x09
 73c:	80 ec       	ldi	r24, 0xC0	; 192
 73e:	86 83       	std	Z+6, r24	; 0x06
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	08 95       	ret

Disassembly of section .text.USART_1_enable:

000007aa <USART_1_enable>:
 7aa:	e0 e2       	ldi	r30, 0x20	; 32
 7ac:	f8 e0       	ldi	r31, 0x08	; 8
 7ae:	86 81       	ldd	r24, Z+6	; 0x06
 7b0:	80 6c       	ori	r24, 0xC0	; 192
 7b2:	86 83       	std	Z+6, r24	; 0x06
 7b4:	08 95       	ret

Disassembly of section .text.USART_1_enable_tx:

000007b6 <USART_1_enable_tx>:
 *
 * \return Nothing
 */
void USART_1_enable_tx()
{
	USART1.CTRLB |= USART_TXEN_bm;
 7b6:	e0 e2       	ldi	r30, 0x20	; 32
 7b8:	f8 e0       	ldi	r31, 0x08	; 8
 7ba:	86 81       	ldd	r24, Z+6	; 0x06
 7bc:	80 64       	ori	r24, 0x40	; 64
 7be:	86 83       	std	Z+6, r24	; 0x06
 7c0:	08 95       	ret

Disassembly of section .text.USART_1_write:

0000079c <USART_1_write>:
 *
 * \return Nothing
 */
void USART_1_enable_rx()
{
	USART1.CTRLB |= USART_RXEN_bm;
 79c:	90 91 24 08 	lds	r25, 0x0824	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>
 7a0:	95 ff       	sbrs	r25, 5
 7a2:	fc cf       	rjmp	.-8      	; 0x79c <USART_1_write>
 7a4:	80 93 22 08 	sts	0x0822, r24	; 0x800822 <__RODATA_PM_OFFSET__+0x7f8822>
 7a8:	08 95       	ret

Disassembly of section .text.__vector_37:

000003d6 <__vector_37>:
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	2f 93       	push	r18
 3e2:	3f 93       	push	r19
 3e4:	4f 93       	push	r20
 3e6:	5f 93       	push	r21
 3e8:	6f 93       	push	r22
 3ea:	7f 93       	push	r23
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
 3f8:	e0 91 5a 70 	lds	r30, 0x705A	; 0x80705a <USART_2_rx_isr_cb>
 3fc:	f0 91 5b 70 	lds	r31, 0x705B	; 0x80705b <USART_2_rx_isr_cb+0x1>
 400:	30 97       	sbiw	r30, 0x00	; 0
 402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	09 95       	icall
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	7f 91       	pop	r23
 414:	6f 91       	pop	r22
 416:	5f 91       	pop	r21
 418:	4f 91       	pop	r20
 41a:	3f 91       	pop	r19
 41c:	2f 91       	pop	r18
 41e:	0f 90       	pop	r0
 420:	0f be       	out	0x3f, r0	; 63
 422:	0f 90       	pop	r0
 424:	1f 90       	pop	r1
 426:	18 95       	reti

Disassembly of section .text.__vector_38:

00000428 <__vector_38>:
 428:	1f 92       	push	r1
 42a:	0f 92       	push	r0
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	2f 93       	push	r18
 434:	3f 93       	push	r19
 436:	4f 93       	push	r20
 438:	5f 93       	push	r21
 43a:	6f 93       	push	r22
 43c:	7f 93       	push	r23
 43e:	8f 93       	push	r24
 440:	9f 93       	push	r25
 442:	af 93       	push	r26
 444:	bf 93       	push	r27
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
 44a:	e0 91 58 70 	lds	r30, 0x7058	; 0x807058 <USART_2_udre_isr_cb>
 44e:	f0 91 59 70 	lds	r31, 0x7059	; 0x807059 <USART_2_udre_isr_cb+0x1>
 452:	30 97       	sbiw	r30, 0x00	; 0
 454:	09 f0       	breq	.+2      	; 0x458 <__vector_38+0x30>
 456:	09 95       	icall
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

Disassembly of section .text.USART_2_init:

000005ce <USART_2_init>:
 5ce:	e0 e4       	ldi	r30, 0x40	; 64
 5d0:	f8 e0       	ldi	r31, 0x08	; 8
 5d2:	8b e0       	ldi	r24, 0x0B	; 11
 5d4:	9a e1       	ldi	r25, 0x1A	; 26
 5d6:	80 87       	std	Z+8, r24	; 0x08
 5d8:	91 87       	std	Z+9, r25	; 0x09
 5da:	80 e8       	ldi	r24, 0x80	; 128
 5dc:	85 83       	std	Z+5, r24	; 0x05
 5de:	80 ec       	ldi	r24, 0xC0	; 192
 5e0:	86 83       	std	Z+6, r24	; 0x06
 5e2:	10 92 60 70 	sts	0x7060, r1	; 0x807060 <USART_2_rx_tail>
 5e6:	10 92 61 70 	sts	0x7061, r1	; 0x807061 <USART_2_rx_head>
 5ea:	10 92 5f 70 	sts	0x705F, r1	; 0x80705f <USART_2_rx_elements>
 5ee:	10 92 5d 70 	sts	0x705D, r1	; 0x80705d <USART_2_tx_tail>
 5f2:	10 92 5e 70 	sts	0x705E, r1	; 0x80705e <USART_2_tx_head>
 5f6:	10 92 5c 70 	sts	0x705C, r1	; 0x80705c <USART_2_tx_elements>
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000007f8 <_fini>:
 7f8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000007fa <__funcs_on_exit>:
 7fa:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000007fc <__simulator_exit>:
 7fc:	08 95       	ret

Disassembly of section .text.exit:

0000071a <exit>:
 71a:	ec 01       	movw	r28, r24
 71c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__funcs_on_exit>
 720:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <_fini>
 724:	ce 01       	movw	r24, r28
 726:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__simulator_exit>
 72a:	ce 01       	movw	r24, r28
 72c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_Exit>

Disassembly of section .text._Exit:

000007f2 <_Exit>:
 7f2:	0e 94 8c 00 	call	0x118	; 0x118 <_exit>
